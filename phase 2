
# SINGLE LINKED LIST IMPLEMENTATION #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class SLL:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("LL is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "==>", end=" ")
                temp=temp.next
obj=SLL()
n1=Node(100)
obj.head=n1
n2=Node(200)
obj.head.next=n2
n3=Node(300)
n2.next=n3
obj.display()

************************


#SINGLE LINKED LIST INSERT OPERATION AT BEGINNING #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
    def insert_beginning(self,data):
        nb=Node(data)
        nb.next=self.head
        self.head=nb
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "==>", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
print("Before inserting 100")
obj.display()
print(" ")
print("After inserting 100")
obj.insert_beginning(100)
obj.display()
print(" ")
print("After inserting 555")
obj.insert_beginning(555)
obj.display()



***************************

# SINGLE LINKED LIST INSERT OPERATION AT END #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def insert_end(self,data):
        ne=Node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=ne
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.insert_end(11111)
obj.display()





************************************


# SINGLELINKED LIST INSERT AT A POSITION#

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def insert_position(self,pos,data):
        ne=Node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
        #ne.data=data
        ne.next=temp.next
        temp.next=ne
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.insert_position(2,1000)
obj.display()

*******************************



#SINGLE LINKED LIST DELETE OPERATION AT POSITION#

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete_position(self,pos):
        temp=self.head.next
        prev=self.head
        for i in range(1,pos-1):
            temp=temp.next
            prev=prev.next
        prev.next=temp.next
        temp.next=None
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete_position(3)
obj.display()


*******************************



#SINGLE LINKED LIST DELETE OPERATION AT BEGINNING #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete(self):
        temp=self.head
        self.head=temp.next
        temp.next=None
        
       
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete()
obj.display()


********************************


#SINGLE LINKED LIST DELETE OPERATION AT END #

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Singlelinkedlist:
    def __init__(self):
        self.head=None
        
    def delete(self,data):
        temp=self.head.next
        prev=self.head
    for i in range (1,prev.next):
        temp=temp.next
        prev=prev.next
        prev.next=None 
        
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while(temp):
                print(temp.data, "-->", end=" ")
                temp=temp.next
obj=Singlelinkedlist()
n=Node(10)
obj.head=n
n1=Node(20)
n.next=n1
n2=Node(30)
n1.next=n2
n3=Node(40)
n2.next=n3
n4=Node(50)
n3.next=n4
obj.display()
print("/")
obj.delete()
obj.display()




***************
stack=[]
def push():

    element=int(input("enter the element"))
    stack.append(element)
    print(stack)

    def pop_element():
        if not stack:
            print("stack is empty")
        else:
            e=stack.pop()
            print("removed element:",e)
            print(stack)
while True:
    print("select operation 1.push 2.pop 3.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop_element()
    elif choice==3:
        break
    else:
        print("enter the correct operation")
        
        
        
        
        
****************
class Node:
    def_init_(self,data)
    self.data = data
    self.next = None 
class Stack:
    def_init_(self)
    self.head = None
    def isempty(self):
        if self.head == None:
            return True
        else:
            return False
        def push(self,data):
            if self.head == None:
                self.head = Node(data)
            else:
                newnode = NOde(data)
                newnode.next = self.head
                self.head = newnode
        def pop(self):
            if self.isempty():
                return None
            else:
                poppednode = self.head
                self.head = self.head.next
                poppednode.next = None
                return poppednode.data
        def peek(self):
            if self.isempty():
                return None
            else:
                return self.head.data
            def display(self):
                t = self.head
                if self.isempty():
                    print("Stack Underflow")
                else:
                    while(t!= None):
                        print(" -> ",end = "")
                return
if_name=="__main_"
s = stack()
s.push(1)
s.push(2)
s.push(3)
s.push(4)
s.display()
print("")
print("peek",s.peek())
s.pop()
s.pop()
s.display()
print("")
print("peek",s.peek())




****************


import queue
L=queue.Queue(maxsize=5)
L.put(10)
L.put(20)

print(type(L))

print(L.get())
print(L.get())


********************

n=int(input("enter size"))
a=list(map(int,input().split(''))) [n:]
total=0
for i in a:
    #print(i,end='')
    total=total+i
    print(total)
    
    *************************
    
    
